/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-11-18 11:57:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import shop.DBconnect;
import shop.*;
import java.net.URLEncoder;
import java.util.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("shop");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("shop.DBconnect");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 한글 깨짐 방지
    request.setCharacterEncoding("UTF-8");

    // 검색 결과를 저장할 리스트
    List<Data> searchResults = new ArrayList<>();

    // POST 메서드로 요청이 왔을 때 검색 수행
    if ("POST".equalsIgnoreCase(request.getMethod())) {
        // 사용자가 입력한 검색어 가져오기
        String searchTerm = request.getParameter("searchTerm");

        // 검색어가 비어있지 않다면 API 호출
        if (searchTerm != null && !searchTerm.isEmpty()) {
            // 네이버 API 호출
            String clientId = "iE6XydOWfru4IEU74MXl";
            String clientSecret = "m9Am_QmO2k";

            String text = URLEncoder.encode(searchTerm, "UTF-8");
            String apiURL = "https://openapi.naver.com/v1/search/shop?query="+text+"&display=100";
            Map<String, String> requestHeaders = new HashMap<>();
            requestHeaders.put("X-Naver-Client-Id", clientId);
            requestHeaders.put("X-Naver-Client-Secret", clientSecret);

            // 네이버 API 호출 메서드를 통해 결과 받아오기
            searchResults = NaverShop.parseItemsArray(NaverShop.get(apiURL, requestHeaders));
        }
    }
 // 저장 버튼이 클릭되면 DB에 저장
    if ("POST".equalsIgnoreCase(request.getMethod()) && request.getParameter("saveButton") != null) {
        DBconnect.saveToDatabase(searchResults);

      out.write("\r\n");
      out.write("		<!--저장확인메시지 출력  -->\r\n");
      out.write("		<script>  				\r\n");
      out.write("            alert(\"데이터가 성공적으로 저장되었습니다.\");\r\n");
      out.write("        </script>\r\n");
      out.write("       \r\n");

       	}		//높은가격순
 			  	 if(request.getParameter("hpriceButton") != null){
 			  	  Collections.sort(searchResults, (data1, data2) -> Integer.compare(Integer.parseInt(data2.getLprice()), Integer.parseInt(data1.getLprice())));
 			  	 }
                  // 낮은가격순
                 if(request.getParameter("lpriceButton") != null){
                  Collections.sort(searchResults, (data1, data2) -> Integer.compare(Integer.parseInt(data1.getLprice()), Integer.parseInt(data2.getLprice())));
                 }
                  //가나다순
                  if(request.getParameter("titleButton") != null){
                  Collections.sort(searchResults, (data1, data2) -> data1.getTitle().compareTo(data2.getTitle()));

                  }
                  //브랜드순
                  if(request.getParameter("brandButton") != null){
                  	Collections.sort(searchResults, (data1, data2) -> data1.getBrand().compareTo(data2.getBrand()));
                  }
       
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/table.css\">\r\n");
      out.write("<style>\r\n");
      out.write("        .product-cell {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            width: 200px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .product-cell img {\r\n");
      out.write("            max-width: 100px;\r\n");
      out.write("            max-height: 100px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table {\r\n");
      out.write("            border-collapse: collapse; /* 셀 간의 간격을 없애기 위해 border-collapse 속성 추가 */\r\n");
      out.write("            width: 100%; /* 테이블을 가득 채우도록 설정 */\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        table, th, td {\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("        }\r\n");
      out.write("</style>\r\n");
      out.write("<title>Search Page</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

    request.setCharacterEncoding("UTF-8");
	String searchTerm = request.getParameter("searchTerm");
	if(searchTerm==null) searchTerm = "";

      out.write('\r');
      out.write('\n');

    int cellCount = 0; // 각 행당 셀 개수를 세기 위한 변수 추가
    Iterator<Data> iterator = searchResults.iterator();

      out.write("\r\n");
      out.write("	<form action=\"\" method=\"post\">\r\n");
      out.write("		<label for=\"searchTerm\">검색어:</label>\r\n");
      out.write("	    <input type=\"text\" id=\"searchTerm\" name=\"searchTerm\" value=\"");
      out.print(searchTerm);
      out.write("\" required>\r\n");
      out.write("        <!-- 히든 필드에 검색어 설정 -->\r\n");
      out.write("        <input type=\"hidden\" id=\"hiddenSearchTerm\" name=\"hiddenSearchTerm\" value=\"");
      out.print(searchTerm);
      out.write("\">\r\n");
      out.write("	    \r\n");
      out.write("	    <button type=\"submit\">검색</button>\r\n");
      out.write("	<!-- 저장 버튼 추가 -->\r\n");
      out.write("    <button type=\"submit\" name=\"saveButton\">검색결과저장</button>\r\n");
      out.write("    <button type=\"submit\" name=\"basketButton\" onclick=\"openModal()\">장바구니</button><p>\r\n");
      out.write("    <button type=\"submit\" name=\"lpriceButton\">낮은가격순</button>\r\n");
      out.write("    <button type=\"submit\" name=\"hpriceButton\">높은가격순</button>\r\n");
      out.write("    <button type=\"submit\" name=\"titleButton\">가나다순</button>\r\n");
      out.write("    <button type=\"submit\" name=\"brandButton\">브랜드순</button>\r\n");
      out.write("	 </form>\r\n");
      out.write("	\r\n");

    // 검색 결과 출력
    if (searchResults != null && !searchResults.isEmpty()) {

      out.write("\r\n");
      out.write("<!-- 검색 결과가 있을 경우 테이블로 출력 -->\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("    <tbody>\r\n");
      out.write("    ");
 
        int columns = 5; // 한 행당 열의 개수
        int count = 0; // 현재 열의 개수를 세기 위한 변수

        for (Data result : searchResults) { 
            // 한 행의 시작 부분
            if (count % columns == 0) {
    
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("    ");
 
            }
            // 각 상품을 표현하는 셀
    
      out.write("\r\n");
      out.write("            <td class=\"product-cell\" >\r\n");
      out.write("                <img alt=\"이미지\" src=\"");
      out.print( result.getImage() );
      out.write("\" onclick=\"window.location='");
      out.print( result.getLink() );
      out.write("'\">\r\n");
      out.write("                <p>");
      out.print( result.getTitle() );
      out.write("</p>\r\n");
      out.write("                <p>");
      out.print( result.getLprice() );
      out.write("원</p>\r\n");
      out.write("                <p>");
      out.print( result.getBrand() );
      out.write("</p>\r\n");
      out.write("                 <p><a href=\"javascript:void(0);\" onclick=\"addToCart('");
      out.print( result.getTitle() );
      out.write("', '");
      out.print( result.getLprice() );
      out.write("')\">담기</a></p>\r\n");
      out.write("            </td>\r\n");
      out.write("    ");

            // 한 행의 끝 부분
            if (++count % columns == 0) {
    
      out.write("\r\n");
      out.write("        </tr>\r\n");
      out.write("    ");

            }
        }

        // 열의 개수가 columns의 배수가 아닌 경우 빈 셀로 채우기
        while (count % columns != 0) {
    
      out.write("\r\n");
      out.write("            <td></td>\r\n");
      out.write("    ");

            count++;
        }
    
      out.write("\r\n");
      out.write("    </tbody>\r\n");
      out.write("</table>\r\n");

    } else if ("POST".equalsIgnoreCase(request.getMethod())) {

      out.write("\r\n");
      out.write("<!-- 검색 결과가 없을 경우 메시지 출력 -->\r\n");
      out.write("<p>검색 결과가 없습니다.</p>\r\n");

    }

      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        function openModal() {\r\n");
      out.write("            document.getElementById(\"myModal\").style.display = \"block\";\r\n");
      out.write("            event.preventDefault(); // 폼 제출 방지\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function closeModal() {\r\n");
      out.write("            document.getElementById(\"myModal\").style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 모달 외부를 클릭하면 모달이 닫히도록 설정\r\n");
      out.write("        window.onclick = function(event) {\r\n");
      out.write("            if (event.target == document.getElementById(\"myModal\")) {\r\n");
      out.write("                document.getElementById(\"myModal\").style.display = \"none\";\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        var shoppingCart = []; // 장바구니 정보를 저장할 배열\r\n");
      out.write("\r\n");
      out.write("        function addToCart(title, lprice) {\r\n");
      out.write("            // 장바구니에 상품 추가\r\n");
      out.write("            shoppingCart.push({ title: title, lprice: lprice });\r\n");
      out.write("\r\n");
      out.write("            // 모달 내용 업데이트\r\n");
      out.write("            updateCartModal();\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function updateCartModal() {\r\n");
      out.write("            var modalContent = document.getElementById(\"myModalContent\");\r\n");
      out.write("            \r\n");
      out.write("            modalContent.innerHTML = \"\";\r\n");
      out.write("            // 장바구니에 있는 상품들을 모달에 추가\r\n");
      out.write("            for (var i = 0; i < shoppingCart.length; i++) {\r\n");
      out.write("                var productInfo = shoppingCart[i];\r\n");
      out.write("                var productElement = document.createElement(\"p\");\r\n");
      out.write("                productElement.innerHTML = productInfo.title + \", 가격: \" + productInfo.lprice + \"원\";\r\n");
      out.write("                modalContent.appendChild(productElement);\r\n");
      out.write("                \r\n");
      out.write("            }\r\n");
      out.write("            // 모달 업데이트\r\n");
      out.write("            document.getElementById(\"myModal\").style.display = \"block\";\r\n");
      out.write("\r\n");
      out.write("            // 모달 업데이트\r\n");
      out.write("            openModal();\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <div id=\"myModal\" class=\"modal\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <h2>장바구니</h2>\r\n");
      out.write("            <span class=\"close\" onclick=\"closeModal()\">&times;</span>\r\n");
      out.write("            <!-- 모달 내용 추가 -->\r\n");
      out.write("            <div id=\"myModalContent\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
